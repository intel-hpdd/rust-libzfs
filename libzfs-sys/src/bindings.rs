/* automatically generated by rust-bindgen */

pub const ZFS_MAX_DATASET_NAME_LEN: u32 = 256;
pub const ZPROP_VALUE: &'static [u8; 6usize] = b"value\0";
pub const ZPOOL_CONFIG_POOL_NAME: &'static [u8; 5usize] = b"name\0";
pub const ZPOOL_CONFIG_VDEV_TREE: &'static [u8; 10usize] = b"vdev_tree\0";
pub const ZPOOL_CONFIG_TYPE: &'static [u8; 5usize] = b"type\0";
pub const ZPOOL_CONFIG_CHILDREN: &'static [u8; 9usize] = b"children\0";
pub const ZPOOL_CONFIG_GUID: &'static [u8; 5usize] = b"guid\0";
pub const ZPOOL_CONFIG_PATH: &'static [u8; 5usize] = b"path\0";
pub const ZPOOL_CONFIG_DEVID: &'static [u8; 6usize] = b"devid\0";
pub const ZPOOL_CONFIG_VDEV_STATS: &'static [u8; 11usize] = b"vdev_stats\0";
pub const ZPOOL_CONFIG_WHOLE_DISK: &'static [u8; 11usize] = b"whole_disk\0";
pub const ZPOOL_CONFIG_SPARES: &'static [u8; 7usize] = b"spares\0";
pub const ZPOOL_CONFIG_HOSTID: &'static [u8; 7usize] = b"hostid\0";
pub const ZPOOL_CONFIG_HOSTNAME: &'static [u8; 9usize] = b"hostname\0";
pub const ZPOOL_CONFIG_PHYS_PATH: &'static [u8; 10usize] = b"phys_path\0";
pub const ZPOOL_CONFIG_IS_LOG: &'static [u8; 7usize] = b"is_log\0";
pub const ZPOOL_CONFIG_L2CACHE: &'static [u8; 8usize] = b"l2cache\0";
pub const ZPOOL_CONFIG_AUX_STATE: &'static [u8; 10usize] = b"aux_state\0";
pub const VDEV_TYPE_ROOT: &'static [u8; 5usize] = b"root\0";
pub const VDEV_TYPE_MIRROR: &'static [u8; 7usize] = b"mirror\0";
pub const VDEV_TYPE_REPLACING: &'static [u8; 10usize] = b"replacing\0";
pub const VDEV_TYPE_RAIDZ: &'static [u8; 6usize] = b"raidz\0";
pub const VDEV_TYPE_DISK: &'static [u8; 5usize] = b"disk\0";
pub const VDEV_TYPE_FILE: &'static [u8; 5usize] = b"file\0";
pub const VDEV_TYPE_MISSING: &'static [u8; 8usize] = b"missing\0";
pub const VDEV_TYPE_HOLE: &'static [u8; 5usize] = b"hole\0";
pub const VDEV_TYPE_SPARE: &'static [u8; 6usize] = b"spare\0";
pub const VDEV_TYPE_LOG: &'static [u8; 4usize] = b"log\0";
pub const VDEV_TYPE_L2CACHE: &'static [u8; 8usize] = b"l2cache\0";
pub const ZFS_MAXPROPLEN: u32 = 4096;
pub const ZPOOL_MAXPROPLEN: u32 = 4096;
pub mod boolean {
    pub type Type = u32;
    pub const B_FALSE: Type = 0;
    pub const B_TRUE: Type = 1;
}
pub use self::boolean::Type as boolean_t;
pub type longlong_t = ::std::os::raw::c_longlong;
pub type diskaddr_t = longlong_t;
pub type hrtime_t = ::std::os::raw::c_longlong;
impl zfs_type_t {
    pub const ZFS_TYPE_FILESYSTEM: zfs_type_t = zfs_type_t(1);
}
impl zfs_type_t {
    pub const ZFS_TYPE_SNAPSHOT: zfs_type_t = zfs_type_t(2);
}
impl zfs_type_t {
    pub const ZFS_TYPE_VOLUME: zfs_type_t = zfs_type_t(4);
}
impl zfs_type_t {
    pub const ZFS_TYPE_POOL: zfs_type_t = zfs_type_t(8);
}
impl zfs_type_t {
    pub const ZFS_TYPE_BOOKMARK: zfs_type_t = zfs_type_t(16);
}
impl ::std::ops::BitOr<zfs_type_t> for zfs_type_t {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        zfs_type_t(self.0 | other.0)
    }
}
impl ::std::ops::BitOrAssign for zfs_type_t {
    #[inline]
    fn bitor_assign(&mut self, rhs: zfs_type_t) {
        self.0 |= rhs.0;
    }
}
impl ::std::ops::BitAnd<zfs_type_t> for zfs_type_t {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        zfs_type_t(self.0 & other.0)
    }
}
impl ::std::ops::BitAndAssign for zfs_type_t {
    #[inline]
    fn bitand_assign(&mut self, rhs: zfs_type_t) {
        self.0 &= rhs.0;
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub struct zfs_type_t(pub u32);
pub const dmu_objset_type_DMU_OST_NONE: dmu_objset_type = 0;
pub const dmu_objset_type_DMU_OST_META: dmu_objset_type = 1;
pub const dmu_objset_type_DMU_OST_ZFS: dmu_objset_type = 2;
pub const dmu_objset_type_DMU_OST_ZVOL: dmu_objset_type = 3;
pub const dmu_objset_type_DMU_OST_OTHER: dmu_objset_type = 4;
pub const dmu_objset_type_DMU_OST_ANY: dmu_objset_type = 5;
pub const dmu_objset_type_DMU_OST_NUMTYPES: dmu_objset_type = 6;
pub type dmu_objset_type = u32;
pub use self::dmu_objset_type as dmu_objset_type_t;
pub const zfs_prop_t_ZFS_PROP_BAD: zfs_prop_t = -1;
pub const zfs_prop_t_ZFS_PROP_TYPE: zfs_prop_t = 0;
pub const zfs_prop_t_ZFS_PROP_CREATION: zfs_prop_t = 1;
pub const zfs_prop_t_ZFS_PROP_USED: zfs_prop_t = 2;
pub const zfs_prop_t_ZFS_PROP_AVAILABLE: zfs_prop_t = 3;
pub const zfs_prop_t_ZFS_PROP_REFERENCED: zfs_prop_t = 4;
pub const zfs_prop_t_ZFS_PROP_COMPRESSRATIO: zfs_prop_t = 5;
pub const zfs_prop_t_ZFS_PROP_MOUNTED: zfs_prop_t = 6;
pub const zfs_prop_t_ZFS_PROP_ORIGIN: zfs_prop_t = 7;
pub const zfs_prop_t_ZFS_PROP_QUOTA: zfs_prop_t = 8;
pub const zfs_prop_t_ZFS_PROP_RESERVATION: zfs_prop_t = 9;
pub const zfs_prop_t_ZFS_PROP_VOLSIZE: zfs_prop_t = 10;
pub const zfs_prop_t_ZFS_PROP_VOLBLOCKSIZE: zfs_prop_t = 11;
pub const zfs_prop_t_ZFS_PROP_RECORDSIZE: zfs_prop_t = 12;
pub const zfs_prop_t_ZFS_PROP_MOUNTPOINT: zfs_prop_t = 13;
pub const zfs_prop_t_ZFS_PROP_SHARENFS: zfs_prop_t = 14;
pub const zfs_prop_t_ZFS_PROP_CHECKSUM: zfs_prop_t = 15;
pub const zfs_prop_t_ZFS_PROP_COMPRESSION: zfs_prop_t = 16;
pub const zfs_prop_t_ZFS_PROP_ATIME: zfs_prop_t = 17;
pub const zfs_prop_t_ZFS_PROP_DEVICES: zfs_prop_t = 18;
pub const zfs_prop_t_ZFS_PROP_EXEC: zfs_prop_t = 19;
pub const zfs_prop_t_ZFS_PROP_SETUID: zfs_prop_t = 20;
pub const zfs_prop_t_ZFS_PROP_READONLY: zfs_prop_t = 21;
pub const zfs_prop_t_ZFS_PROP_ZONED: zfs_prop_t = 22;
pub const zfs_prop_t_ZFS_PROP_SNAPDIR: zfs_prop_t = 23;
pub const zfs_prop_t_ZFS_PROP_PRIVATE: zfs_prop_t = 24;
pub const zfs_prop_t_ZFS_PROP_ACLINHERIT: zfs_prop_t = 25;
pub const zfs_prop_t_ZFS_PROP_CREATETXG: zfs_prop_t = 26;
pub const zfs_prop_t_ZFS_PROP_NAME: zfs_prop_t = 27;
pub const zfs_prop_t_ZFS_PROP_CANMOUNT: zfs_prop_t = 28;
pub const zfs_prop_t_ZFS_PROP_ISCSIOPTIONS: zfs_prop_t = 29;
pub const zfs_prop_t_ZFS_PROP_XATTR: zfs_prop_t = 30;
pub const zfs_prop_t_ZFS_PROP_NUMCLONES: zfs_prop_t = 31;
pub const zfs_prop_t_ZFS_PROP_COPIES: zfs_prop_t = 32;
pub const zfs_prop_t_ZFS_PROP_VERSION: zfs_prop_t = 33;
pub const zfs_prop_t_ZFS_PROP_UTF8ONLY: zfs_prop_t = 34;
pub const zfs_prop_t_ZFS_PROP_NORMALIZE: zfs_prop_t = 35;
pub const zfs_prop_t_ZFS_PROP_CASE: zfs_prop_t = 36;
pub const zfs_prop_t_ZFS_PROP_VSCAN: zfs_prop_t = 37;
pub const zfs_prop_t_ZFS_PROP_NBMAND: zfs_prop_t = 38;
pub const zfs_prop_t_ZFS_PROP_SHARESMB: zfs_prop_t = 39;
pub const zfs_prop_t_ZFS_PROP_REFQUOTA: zfs_prop_t = 40;
pub const zfs_prop_t_ZFS_PROP_REFRESERVATION: zfs_prop_t = 41;
pub const zfs_prop_t_ZFS_PROP_GUID: zfs_prop_t = 42;
pub const zfs_prop_t_ZFS_PROP_PRIMARYCACHE: zfs_prop_t = 43;
pub const zfs_prop_t_ZFS_PROP_SECONDARYCACHE: zfs_prop_t = 44;
pub const zfs_prop_t_ZFS_PROP_USEDSNAP: zfs_prop_t = 45;
pub const zfs_prop_t_ZFS_PROP_USEDDS: zfs_prop_t = 46;
pub const zfs_prop_t_ZFS_PROP_USEDCHILD: zfs_prop_t = 47;
pub const zfs_prop_t_ZFS_PROP_USEDREFRESERV: zfs_prop_t = 48;
pub const zfs_prop_t_ZFS_PROP_USERACCOUNTING: zfs_prop_t = 49;
pub const zfs_prop_t_ZFS_PROP_STMF_SHAREINFO: zfs_prop_t = 50;
pub const zfs_prop_t_ZFS_PROP_DEFER_DESTROY: zfs_prop_t = 51;
pub const zfs_prop_t_ZFS_PROP_USERREFS: zfs_prop_t = 52;
pub const zfs_prop_t_ZFS_PROP_LOGBIAS: zfs_prop_t = 53;
pub const zfs_prop_t_ZFS_PROP_UNIQUE: zfs_prop_t = 54;
pub const zfs_prop_t_ZFS_PROP_OBJSETID: zfs_prop_t = 55;
pub const zfs_prop_t_ZFS_PROP_DEDUP: zfs_prop_t = 56;
pub const zfs_prop_t_ZFS_PROP_MLSLABEL: zfs_prop_t = 57;
pub const zfs_prop_t_ZFS_PROP_SYNC: zfs_prop_t = 58;
pub const zfs_prop_t_ZFS_PROP_DNODESIZE: zfs_prop_t = 59;
pub const zfs_prop_t_ZFS_PROP_REFRATIO: zfs_prop_t = 60;
pub const zfs_prop_t_ZFS_PROP_WRITTEN: zfs_prop_t = 61;
pub const zfs_prop_t_ZFS_PROP_CLONES: zfs_prop_t = 62;
pub const zfs_prop_t_ZFS_PROP_LOGICALUSED: zfs_prop_t = 63;
pub const zfs_prop_t_ZFS_PROP_LOGICALREFERENCED: zfs_prop_t = 64;
pub const zfs_prop_t_ZFS_PROP_INCONSISTENT: zfs_prop_t = 65;
pub const zfs_prop_t_ZFS_PROP_VOLMODE: zfs_prop_t = 66;
pub const zfs_prop_t_ZFS_PROP_FILESYSTEM_LIMIT: zfs_prop_t = 67;
pub const zfs_prop_t_ZFS_PROP_SNAPSHOT_LIMIT: zfs_prop_t = 68;
pub const zfs_prop_t_ZFS_PROP_FILESYSTEM_COUNT: zfs_prop_t = 69;
pub const zfs_prop_t_ZFS_PROP_SNAPSHOT_COUNT: zfs_prop_t = 70;
pub const zfs_prop_t_ZFS_PROP_SNAPDEV: zfs_prop_t = 71;
pub const zfs_prop_t_ZFS_PROP_ACLTYPE: zfs_prop_t = 72;
pub const zfs_prop_t_ZFS_PROP_SELINUX_CONTEXT: zfs_prop_t = 73;
pub const zfs_prop_t_ZFS_PROP_SELINUX_FSCONTEXT: zfs_prop_t = 74;
pub const zfs_prop_t_ZFS_PROP_SELINUX_DEFCONTEXT: zfs_prop_t = 75;
pub const zfs_prop_t_ZFS_PROP_SELINUX_ROOTCONTEXT: zfs_prop_t = 76;
pub const zfs_prop_t_ZFS_PROP_RELATIME: zfs_prop_t = 77;
pub const zfs_prop_t_ZFS_PROP_REDUNDANT_METADATA: zfs_prop_t = 78;
pub const zfs_prop_t_ZFS_PROP_OVERLAY: zfs_prop_t = 79;
pub const zfs_prop_t_ZFS_PROP_PREV_SNAP: zfs_prop_t = 80;
pub const zfs_prop_t_ZFS_PROP_RECEIVE_RESUME_TOKEN: zfs_prop_t = 81;
pub const zfs_prop_t_ZFS_NUM_PROPS: zfs_prop_t = 82;
pub type zfs_prop_t = i32;
pub mod zpool_prop_t {
    pub type Type = u32;
    pub const ZPOOL_PROP_NAME: Type = 0;
    pub const ZPOOL_PROP_SIZE: Type = 1;
    pub const ZPOOL_PROP_CAPACITY: Type = 2;
    pub const ZPOOL_PROP_ALTROOT: Type = 3;
    pub const ZPOOL_PROP_HEALTH: Type = 4;
    pub const ZPOOL_PROP_GUID: Type = 5;
    pub const ZPOOL_PROP_VERSION: Type = 6;
    pub const ZPOOL_PROP_BOOTFS: Type = 7;
    pub const ZPOOL_PROP_DELEGATION: Type = 8;
    pub const ZPOOL_PROP_AUTOREPLACE: Type = 9;
    pub const ZPOOL_PROP_CACHEFILE: Type = 10;
    pub const ZPOOL_PROP_FAILUREMODE: Type = 11;
    pub const ZPOOL_PROP_LISTSNAPS: Type = 12;
    pub const ZPOOL_PROP_AUTOEXPAND: Type = 13;
    pub const ZPOOL_PROP_DEDUPDITTO: Type = 14;
    pub const ZPOOL_PROP_DEDUPRATIO: Type = 15;
    pub const ZPOOL_PROP_FREE: Type = 16;
    pub const ZPOOL_PROP_ALLOCATED: Type = 17;
    pub const ZPOOL_PROP_READONLY: Type = 18;
    pub const ZPOOL_PROP_ASHIFT: Type = 19;
    pub const ZPOOL_PROP_COMMENT: Type = 20;
    pub const ZPOOL_PROP_EXPANDSZ: Type = 21;
    pub const ZPOOL_PROP_FREEING: Type = 22;
    pub const ZPOOL_PROP_FRAGMENTATION: Type = 23;
    pub const ZPOOL_PROP_LEAKED: Type = 24;
    pub const ZPOOL_PROP_MAXBLOCKSIZE: Type = 25;
    pub const ZPOOL_PROP_TNAME: Type = 26;
    pub const ZPOOL_PROP_MAXDNODESIZE: Type = 27;
    pub const ZPOOL_PROP_MULTIHOST: Type = 28;
    pub const ZPOOL_NUM_PROPS: Type = 29;
}
pub const zprop_source_t_ZPROP_SRC_NONE: zprop_source_t = 1;
pub const zprop_source_t_ZPROP_SRC_DEFAULT: zprop_source_t = 2;
pub const zprop_source_t_ZPROP_SRC_TEMPORARY: zprop_source_t = 4;
pub const zprop_source_t_ZPROP_SRC_LOCAL: zprop_source_t = 8;
pub const zprop_source_t_ZPROP_SRC_INHERITED: zprop_source_t = 16;
pub const zprop_source_t_ZPROP_SRC_RECEIVED: zprop_source_t = 32;
pub type zprop_source_t = u32;
extern "C" {
    pub fn zfs_prop_to_name(arg1: zfs_prop_t) -> *const ::std::os::raw::c_char;
}
pub const vdev_state_VDEV_STATE_UNKNOWN: vdev_state = 0;
pub const vdev_state_VDEV_STATE_CLOSED: vdev_state = 1;
pub const vdev_state_VDEV_STATE_OFFLINE: vdev_state = 2;
pub const vdev_state_VDEV_STATE_REMOVED: vdev_state = 3;
pub const vdev_state_VDEV_STATE_CANT_OPEN: vdev_state = 4;
pub const vdev_state_VDEV_STATE_FAULTED: vdev_state = 5;
pub const vdev_state_VDEV_STATE_DEGRADED: vdev_state = 6;
pub const vdev_state_VDEV_STATE_HEALTHY: vdev_state = 7;
pub type vdev_state = u32;
pub use self::vdev_state as vdev_state_t;
pub const vdev_aux_VDEV_AUX_NONE: vdev_aux = 0;
pub const vdev_aux_VDEV_AUX_OPEN_FAILED: vdev_aux = 1;
pub const vdev_aux_VDEV_AUX_CORRUPT_DATA: vdev_aux = 2;
pub const vdev_aux_VDEV_AUX_NO_REPLICAS: vdev_aux = 3;
pub const vdev_aux_VDEV_AUX_BAD_GUID_SUM: vdev_aux = 4;
pub const vdev_aux_VDEV_AUX_TOO_SMALL: vdev_aux = 5;
pub const vdev_aux_VDEV_AUX_BAD_LABEL: vdev_aux = 6;
pub const vdev_aux_VDEV_AUX_VERSION_NEWER: vdev_aux = 7;
pub const vdev_aux_VDEV_AUX_VERSION_OLDER: vdev_aux = 8;
pub const vdev_aux_VDEV_AUX_UNSUP_FEAT: vdev_aux = 9;
pub const vdev_aux_VDEV_AUX_SPARED: vdev_aux = 10;
pub const vdev_aux_VDEV_AUX_ERR_EXCEEDED: vdev_aux = 11;
pub const vdev_aux_VDEV_AUX_IO_FAILURE: vdev_aux = 12;
pub const vdev_aux_VDEV_AUX_BAD_LOG: vdev_aux = 13;
pub const vdev_aux_VDEV_AUX_EXTERNAL: vdev_aux = 14;
pub const vdev_aux_VDEV_AUX_SPLIT_POOL: vdev_aux = 15;
pub const vdev_aux_VDEV_AUX_BAD_ASHIFT: vdev_aux = 16;
pub const vdev_aux_VDEV_AUX_EXTERNAL_PERSIST: vdev_aux = 17;
pub const vdev_aux_VDEV_AUX_ACTIVE: vdev_aux = 18;
pub type vdev_aux = u32;
pub use self::vdev_aux as vdev_aux_t;
pub mod pool_state {
    pub type Type = u32;
    pub const POOL_STATE_ACTIVE: Type = 0;
    pub const POOL_STATE_EXPORTED: Type = 1;
    pub const POOL_STATE_DESTROYED: Type = 2;
    pub const POOL_STATE_SPARE: Type = 3;
    pub const POOL_STATE_L2CACHE: Type = 4;
    pub const POOL_STATE_UNINITIALIZED: Type = 5;
    pub const POOL_STATE_UNAVAIL: Type = 6;
    pub const POOL_STATE_POTENTIALLY_ACTIVE: Type = 7;
}
pub use self::pool_state::Type as pool_state_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vdev_stat {
    pub vs_timestamp: hrtime_t,
    pub vs_state: u64,
    pub vs_aux: u64,
    pub vs_alloc: u64,
    pub vs_space: u64,
    pub vs_dspace: u64,
    pub vs_rsize: u64,
    pub vs_esize: u64,
    pub vs_ops: [u64; 6usize],
    pub vs_bytes: [u64; 6usize],
    pub vs_read_errors: u64,
    pub vs_write_errors: u64,
    pub vs_checksum_errors: u64,
    pub vs_self_healed: u64,
    pub vs_scan_removing: u64,
    pub vs_scan_processed: u64,
    pub vs_fragmentation: u64,
}
#[test]
fn bindgen_test_layout_vdev_stat() {
    assert_eq!(
        ::std::mem::size_of::<vdev_stat>(),
        216usize,
        concat!("Size of: ", stringify!(vdev_stat))
    );
    assert_eq!(
        ::std::mem::align_of::<vdev_stat>(),
        8usize,
        concat!("Alignment of ", stringify!(vdev_stat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdev_stat>())).vs_timestamp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vdev_stat),
            "::",
            stringify!(vs_timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdev_stat>())).vs_state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vdev_stat),
            "::",
            stringify!(vs_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdev_stat>())).vs_aux as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vdev_stat),
            "::",
            stringify!(vs_aux)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdev_stat>())).vs_alloc as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vdev_stat),
            "::",
            stringify!(vs_alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdev_stat>())).vs_space as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vdev_stat),
            "::",
            stringify!(vs_space)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdev_stat>())).vs_dspace as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(vdev_stat),
            "::",
            stringify!(vs_dspace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdev_stat>())).vs_rsize as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(vdev_stat),
            "::",
            stringify!(vs_rsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdev_stat>())).vs_esize as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(vdev_stat),
            "::",
            stringify!(vs_esize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdev_stat>())).vs_ops as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(vdev_stat),
            "::",
            stringify!(vs_ops)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdev_stat>())).vs_bytes as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(vdev_stat),
            "::",
            stringify!(vs_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdev_stat>())).vs_read_errors as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(vdev_stat),
            "::",
            stringify!(vs_read_errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdev_stat>())).vs_write_errors as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(vdev_stat),
            "::",
            stringify!(vs_write_errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdev_stat>())).vs_checksum_errors as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(vdev_stat),
            "::",
            stringify!(vs_checksum_errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdev_stat>())).vs_self_healed as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(vdev_stat),
            "::",
            stringify!(vs_self_healed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdev_stat>())).vs_scan_removing as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(vdev_stat),
            "::",
            stringify!(vs_scan_removing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdev_stat>())).vs_scan_processed as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(vdev_stat),
            "::",
            stringify!(vs_scan_processed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdev_stat>())).vs_fragmentation as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(vdev_stat),
            "::",
            stringify!(vs_fragmentation)
        )
    );
}
pub type vdev_stat_t = vdev_stat;
extern "C" {
    pub fn thread_init();
}
extern "C" {
    pub fn thread_fini();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dmu_objset_stats {
    pub dds_num_clones: u64,
    pub dds_creation_txg: u64,
    pub dds_guid: u64,
    pub dds_type: dmu_objset_type_t,
    pub dds_is_snapshot: u8,
    pub dds_inconsistent: u8,
    pub dds_origin: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_dmu_objset_stats() {
    assert_eq!(
        ::std::mem::size_of::<dmu_objset_stats>(),
        288usize,
        concat!("Size of: ", stringify!(dmu_objset_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<dmu_objset_stats>(),
        8usize,
        concat!("Alignment of ", stringify!(dmu_objset_stats))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dmu_objset_stats>())).dds_num_clones as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dmu_objset_stats),
            "::",
            stringify!(dds_num_clones)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dmu_objset_stats>())).dds_creation_txg as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dmu_objset_stats),
            "::",
            stringify!(dds_creation_txg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dmu_objset_stats>())).dds_guid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dmu_objset_stats),
            "::",
            stringify!(dds_guid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dmu_objset_stats>())).dds_type as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(dmu_objset_stats),
            "::",
            stringify!(dds_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dmu_objset_stats>())).dds_is_snapshot as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(dmu_objset_stats),
            "::",
            stringify!(dds_is_snapshot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dmu_objset_stats>())).dds_inconsistent as *const _ as usize
        },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(dmu_objset_stats),
            "::",
            stringify!(dds_inconsistent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dmu_objset_stats>())).dds_origin as *const _ as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(dmu_objset_stats),
            "::",
            stringify!(dds_origin)
        )
    );
}
pub type dmu_objset_stats_t = dmu_objset_stats;
pub type zfs_handle_t = zfs_handle;
pub type zpool_handle_t = zpool_handle;
pub type libzfs_handle_t = [u64; 305usize];
extern "C" {
    pub fn libzfs_init() -> *mut libzfs_handle_t;
}
extern "C" {
    pub fn libzfs_fini(arg1: *mut libzfs_handle_t);
}
extern "C" {
    pub fn zpool_get_handle(arg1: *mut zpool_handle_t) -> *mut libzfs_handle_t;
}
extern "C" {
    pub fn libzfs_error_description(arg1: *mut libzfs_handle_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zpool_open_canfail(
        arg1: *mut libzfs_handle_t,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut zpool_handle_t;
}
extern "C" {
    pub fn zpool_close(arg1: *mut zpool_handle_t);
}
extern "C" {
    pub fn zpool_get_name(arg1: *mut zpool_handle_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zpool_get_state(arg1: *mut zpool_handle_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zpool_state_to_name(arg1: vdev_state_t, arg2: vdev_aux_t)
        -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn zpool_pool_state_to_name(arg1: pool_state_t) -> *const ::std::os::raw::c_char;
}
pub type zpool_iter_f = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut zpool_handle_t, arg2: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn zpool_iter(
        arg1: *mut libzfs_handle_t,
        arg2: zpool_iter_f,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zpool_get_prop(
        arg1: *mut zpool_handle_t,
        arg2: zpool_prop_t::Type,
        arg3: *mut ::std::os::raw::c_char,
        proplen: usize,
        arg4: *mut zprop_source_t,
        literal: boolean_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zpool_get_prop_int(
        arg1: *mut zpool_handle_t,
        arg2: zpool_prop_t::Type,
        arg3: *mut zprop_source_t,
    ) -> u64;
}
extern "C" {
    pub fn zpool_get_config(arg1: *mut zpool_handle_t, arg2: *mut *mut nvlist_t) -> *mut nvlist_t;
}
extern "C" {
    pub fn zpool_export(
        arg1: *mut zpool_handle_t,
        arg2: boolean_t,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zpool_import(
        arg1: *mut libzfs_handle_t,
        arg2: *mut nvlist_t,
        arg3: *const ::std::os::raw::c_char,
        altroot: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zpool_find_import(
        arg1: *mut libzfs_handle_t,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> *mut nvlist_t;
}
extern "C" {
    pub fn zfs_open(
        arg1: *mut libzfs_handle_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut zfs_handle_t;
}
extern "C" {
    pub fn zfs_close(arg1: *mut zfs_handle_t);
}
extern "C" {
    pub fn zfs_get_type(arg1: *const zfs_handle_t) -> zfs_type_t;
}
extern "C" {
    pub fn zfs_get_name(arg1: *const zfs_handle_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zfs_prop_get(
        arg1: *mut zfs_handle_t,
        arg2: zfs_prop_t,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut zprop_source_t,
        arg6: *mut ::std::os::raw::c_char,
        arg7: usize,
        arg8: boolean_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zfs_get_user_props(arg1: *mut zfs_handle_t) -> *mut nvlist_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zprop_list {
    pub pl_prop: ::std::os::raw::c_int,
    pub pl_user_prop: *mut ::std::os::raw::c_char,
    pub pl_next: *mut zprop_list,
    pub pl_all: boolean_t,
    pub pl_width: usize,
    pub pl_recvd_width: usize,
    pub pl_fixed: boolean_t,
}
#[test]
fn bindgen_test_layout_zprop_list() {
    assert_eq!(
        ::std::mem::size_of::<zprop_list>(),
        56usize,
        concat!("Size of: ", stringify!(zprop_list))
    );
    assert_eq!(
        ::std::mem::align_of::<zprop_list>(),
        8usize,
        concat!("Alignment of ", stringify!(zprop_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zprop_list>())).pl_prop as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(zprop_list),
            "::",
            stringify!(pl_prop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zprop_list>())).pl_user_prop as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(zprop_list),
            "::",
            stringify!(pl_user_prop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zprop_list>())).pl_next as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(zprop_list),
            "::",
            stringify!(pl_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zprop_list>())).pl_all as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(zprop_list),
            "::",
            stringify!(pl_all)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zprop_list>())).pl_width as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(zprop_list),
            "::",
            stringify!(pl_width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zprop_list>())).pl_recvd_width as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(zprop_list),
            "::",
            stringify!(pl_recvd_width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zprop_list>())).pl_fixed as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(zprop_list),
            "::",
            stringify!(pl_fixed)
        )
    );
}
pub type zprop_list_t = zprop_list;
extern "C" {
    pub fn zfs_expand_proplist(
        arg1: *mut zfs_handle_t,
        arg2: *mut *mut zprop_list_t,
        arg3: boolean_t,
        arg4: boolean_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zprop_free_list(arg1: *mut zprop_list_t);
}
pub type zfs_iter_f = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut zfs_handle_t, arg2: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn zfs_iter_filesystems(
        arg1: *mut zfs_handle_t,
        arg2: zfs_iter_f,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zfs_type_to_name(arg1: zfs_type_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zfs_path_to_zhandle(
        arg1: *mut libzfs_handle_t,
        arg2: *mut ::std::os::raw::c_char,
        arg3: zfs_type_t,
    ) -> *mut zfs_handle_t;
}
extern "C" {
    pub fn zpool_disable_datasets(
        arg1: *mut zpool_handle_t,
        arg2: boolean_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct zfs_handle {
    pub zfs_hdl: *mut libzfs_handle_t,
    pub zpool_hdl: *mut zpool_handle_t,
    pub zfs_name: [::std::os::raw::c_char; 256usize],
    pub zfs_type: zfs_type_t,
    pub zfs_head_type: zfs_type_t,
    pub zfs_dmustats: dmu_objset_stats_t,
    pub zfs_props: *mut nvlist_t,
    pub zfs_user_props: *mut nvlist_t,
    pub zfs_recvd_props: *mut nvlist_t,
    pub zfs_mntcheck: boolean_t,
    pub zfs_mntopts: *mut ::std::os::raw::c_char,
    pub zfs_props_table: *mut u8,
}
#[test]
fn bindgen_test_layout_zfs_handle() {
    assert_eq!(
        ::std::mem::size_of::<zfs_handle>(),
        616usize,
        concat!("Size of: ", stringify!(zfs_handle))
    );
    assert_eq!(
        ::std::mem::align_of::<zfs_handle>(),
        8usize,
        concat!("Alignment of ", stringify!(zfs_handle))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_handle>())).zfs_hdl as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_handle),
            "::",
            stringify!(zfs_hdl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_handle>())).zpool_hdl as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_handle),
            "::",
            stringify!(zpool_hdl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_handle>())).zfs_name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_handle),
            "::",
            stringify!(zfs_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_handle>())).zfs_type as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_handle),
            "::",
            stringify!(zfs_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_handle>())).zfs_head_type as *const _ as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_handle),
            "::",
            stringify!(zfs_head_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_handle>())).zfs_dmustats as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_handle),
            "::",
            stringify!(zfs_dmustats)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_handle>())).zfs_props as *const _ as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_handle),
            "::",
            stringify!(zfs_props)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_handle>())).zfs_user_props as *const _ as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_handle),
            "::",
            stringify!(zfs_user_props)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_handle>())).zfs_recvd_props as *const _ as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_handle),
            "::",
            stringify!(zfs_recvd_props)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_handle>())).zfs_mntcheck as *const _ as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_handle),
            "::",
            stringify!(zfs_mntcheck)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_handle>())).zfs_mntopts as *const _ as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_handle),
            "::",
            stringify!(zfs_mntopts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zfs_handle>())).zfs_props_table as *const _ as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(zfs_handle),
            "::",
            stringify!(zfs_props_table)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct zpool_handle {
    pub zpool_hdl: *mut libzfs_handle_t,
    pub zpool_next: *mut zpool_handle_t,
    pub zpool_name: [::std::os::raw::c_char; 256usize],
    pub zpool_state: ::std::os::raw::c_int,
    pub zpool_config_size: usize,
    pub zpool_config: *mut nvlist_t,
    pub zpool_old_config: *mut nvlist_t,
    pub zpool_props: *mut nvlist_t,
    pub zpool_start_block: diskaddr_t,
}
#[test]
fn bindgen_test_layout_zpool_handle() {
    assert_eq!(
        ::std::mem::size_of::<zpool_handle>(),
        320usize,
        concat!("Size of: ", stringify!(zpool_handle))
    );
    assert_eq!(
        ::std::mem::align_of::<zpool_handle>(),
        8usize,
        concat!("Alignment of ", stringify!(zpool_handle))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zpool_handle>())).zpool_hdl as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(zpool_handle),
            "::",
            stringify!(zpool_hdl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zpool_handle>())).zpool_next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(zpool_handle),
            "::",
            stringify!(zpool_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zpool_handle>())).zpool_name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(zpool_handle),
            "::",
            stringify!(zpool_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zpool_handle>())).zpool_state as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(zpool_handle),
            "::",
            stringify!(zpool_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zpool_handle>())).zpool_config_size as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(zpool_handle),
            "::",
            stringify!(zpool_config_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zpool_handle>())).zpool_config as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(zpool_handle),
            "::",
            stringify!(zpool_config)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zpool_handle>())).zpool_old_config as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(zpool_handle),
            "::",
            stringify!(zpool_old_config)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zpool_handle>())).zpool_props as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(zpool_handle),
            "::",
            stringify!(zpool_props)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<zpool_handle>())).zpool_start_block as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(zpool_handle),
            "::",
            stringify!(zpool_start_block)
        )
    );
}
extern "C" {
    pub fn zfs_validate_name(
        hdl: *mut libzfs_handle_t,
        path: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
        modifying: boolean_t,
    ) -> ::std::os::raw::c_int;
}
